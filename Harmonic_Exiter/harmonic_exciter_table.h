
// harmonic_exciter_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  -1.400000
 // --table_div  2.596998
 // --table_op  1.000000

struct tableharmonic_exciter { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tableharmonic_exciter_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tableharmonic_exciter&() const { return *(tableharmonic_exciter*)this; }
};

 static tableharmonic_exciter_imp<200> harmonic_exciter_table = {
	0,0.290603,142.143,200, {
	0.000000000000,0.006288742856,0.012549671654,0.018782909388,0.024988578503,
	0.031166800896,0.037317697920,0.043441390382,0.049537998544,0.055607642124,
	0.061650440292,0.067666511672,0.073655974333,0.079618945792,0.085555543001,
	0.091465882343,0.097350079616,0.103208250024,0.109040508151,0.114846967941,
	0.120627742659,0.126382944856,0.132112686313,0.137817077972,0.143496229851,
	0.149150250934,0.154779249034,0.160383330620,0.165962600588,0.171517161992,
	0.177047115681,0.182552559859,0.188033589521,0.193490295739,0.198922764770,
	0.204331076921,0.209715305125,0.215075513139,0.220411753283,0.225724063577,
	0.231012464141,0.236276952669,0.241517498713,0.246734036517,0.251926455985,
	0.257094591356,0.262238206992,0.267356979576,0.272450475860,0.277518124908,
	0.282559183589,0.287572693834,0.292557429929,0.297511833986,0.302433937506,
	0.307321267049,0.312170732335,0.316978495818,0.321739824292,0.326448925517,
	0.331098776654,0.335680956649,0.340185501645,0.344600810511,0.348913635183,
	0.353109195295,0.357171454693,0.361083585122,0.364828617194,0.368390242405,
	0.371753689985,0.374906571263,0.377839575091,0.380546917617,0.383026494382,
	0.385279738180,0.387311235058,0.389128180289,0.390739762441,0.392156551514,
	0.393389945000,0.394451702055,0.395353576069,0.396107042081,0.396723107502,
	0.397212191287,0.397584056449,0.397847782251,0.398011764636,0.398083735802,
	0.398070795978,0.397979452292,0.397815661081,0.397584871128,0.397292066137,
	0.396941805410,0.396538262071,0.396085258553,0.395586299209,0.395044600089,
	0.394463115987,0.393844564923,0.393191450231,0.392506080478,0.391790587380,
	0.391046941924,0.390276968868,0.389482359777,0.388664684758,0.387825403022,
	0.386965872401,0.386087357929,0.385191039586,0.384278019298,0.383349327263,
	0.382405927686,0.381448723973,0.380478563449,0.379496241647,0.378502506206,
	0.377498060425,0.376483566508,0.375459648520,0.374426895100,0.373385861936,
	0.372337074039,0.371281027827,0.370218193042,0.369149014511,0.368073913771,
	0.366993290561,0.365907524206,0.364816974893,0.363721984848,0.362622879430,
	0.361519968141,0.360413545570,0.359303892257,0.358191275512,0.357075950161,
	0.355958159253,0.354838134714,0.353716097953,0.352592260437,0.351466824220,
	0.350339982443,0.349211919797,0.348082812963,0.346952831019,0.345822135824,
	0.344690882379,0.343559219164,0.342427288458,0.341295226638,0.340163164461,
	0.339031227327,0.337899535535,0.336768204513,0.335637345045,0.334507063480,
	0.333377461930,0.332248638462,0.331120687272,0.329993698853,0.328867760162,
	0.327742954761,0.326619362969,0.325497061993,0.324376126060,0.323256626539,
	0.322138632058,0.321022208614,0.319907419680,0.318794326304,0.317682987205,
	0.316573458866,0.315465795617,0.314360049723,0.313256271456,0.312154509179,
	0.311054809409,0.309957216892,0.308861774666,0.307768524125,0.306677505078,
	0.305588755806,0.304502313118,0.303418212403,0.302336487681,0.301257171649,
	0.300180295730,0.299105890117,0.298033983813,0.296964604674,0.295897779447,
	0.294833533809,0.293771892401,0.292712878863,0.291656515869,0.290602825159
	}
};

double always_inline harmonic_exciterclip(double x) {
    double f = fabs(x);
    f = f * harmonic_exciter_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = harmonic_exciter_table.data[0];
    } else if (i >= harmonic_exciter_table.size-1) {
        f = harmonic_exciter_table.data[harmonic_exciter_table.size-1];
    } else {
    f -= i;
    f = harmonic_exciter_table.data[i]*(1-f) + harmonic_exciter_table.data[i+1]*f;
    }
    return copysign(f, x);
}

