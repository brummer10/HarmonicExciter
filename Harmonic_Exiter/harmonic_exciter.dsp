

/*******************************************************************************
**************************** File generated by *********************************
********************************************************************************
 ./build-plug.py -i Harmonic_exiter.sch -b
*******************************************************************************/

// generated automatically
// DO NOT MODIFY!
declare id "harmonic_exciter";
declare name "harmonic_exciter";
declare category "Extern";
declare shortname "harmonic_exciter";
declare description "harmonic_exciter";

import("stdfaust.lib");

/*******************************************************************************
  * harmonic_exciter_p1 generated by dkbuiler from Harmonic_exiter_p1.sch
*******************************************************************************/

p1 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    Amp = vslider("Amp[name:Amp][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    b0 = -0.000442226399954678*Amp*fs - 2.07846407978698e-5*fs;

    b1 = 0.000442226399954678*Amp*fs + 2.07846407978698e-5*fs;

    a0 = Amp*(4.42226399954678e-9*fs + 3.36313388885063e-23) + 2.07850564906858e-5*fs + 0.00221115411109339;

    a1 = Amp*(-4.42226399954678e-9*fs + 3.36313388885063e-23) - 2.07850564906858e-5*fs + 0.00221115411109339;
};


/*******************************************************************************
  * harmonic_exciter generated by dkbuiler from Harmonic_exiter.sch
*******************************************************************************/

p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    BPF = vslider("BPF[name:BPF][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    b0 = BPF*(-5.62071707883453e-10*BPF*pow(fs,2) + fs*(1.29276492813194e-9*fs + 1.27870034843137e-12)) + fs*(-7.43339833675867e-10*fs - 1.47050540069608e-12) - 2.90320488955534e-18;

    b1 = BPF*(1.12414341576691e-9*BPF*pow(fs,2) - 2.58552985626388e-9*pow(fs,2)) + 1.48667966735173e-9*pow(fs,2) - 5.80640977911069e-18;

    b2 = BPF*(-5.62071707883453e-10*BPF*pow(fs,2) + fs*(1.29276492813194e-9*fs - 1.27870034843137e-12)) + fs*(-7.43339833675867e-10*fs + 1.47050540069608e-12) - 2.90320488955534e-18;

    a0 = BPF*(1.01175492948878e-9*BPF*pow(fs,2) + fs*(-2.32703633782419e-9*fs - 4.8452657627097e-7)) + fs*(1.33804589424891e-9*fs + 5.57205562711616e-7) + 5.22587891977434e-8;

    a1 = BPF*(-2.02350985897756e-9*BPF*pow(fs,2) + 4.65407267564838e-9*pow(fs,2)) - 2.67609178849782e-9*pow(fs,2) + 1.04517578395487e-7;

    a2 = BPF*(1.01175492948878e-9*BPF*pow(fs,2) + fs*(-2.32703633782419e-9*fs + 4.8452657627097e-7)) + fs*(1.33804589424891e-9*fs - 5.57205562711616e-7) + 5.22587891977434e-8;
};


/*******************************************************************************
  * harmonic_exciter_p2 generated by dkbuiler from Harmonic_exiter_p2.sch
*******************************************************************************/

p3 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    Mix = vslider("Harmonics[name:Harmonics][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    b0 = -9.6513901108519e-5*Mix*fs;

    b1 = 9.6513901108519e-5*Mix*fs;

    a0 = 2.07413945278023e-5*fs + 0.00441306266548985;

    a1 = -2.07413945278023e-5*fs + 0.00441306266548985;
};

harmonic_exciter_clip = _<: ba.if(signbit(_), harmonic_exciterclip, _) :>_  with  {

    signbit = ffunction(int signbit(float), "math.h", "");

    harmonic_exciterclip = ffunction(float harmonic_exciterclip(float), "harmonic_exciter_table.h", "");

};

/*******************************************************************************
  * harmonic_exciter_mixer generated by dkbuiler from Harmonic_exiter_mixer.sch
*******************************************************************************/

p4 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = -2.08326996677116e-5*fs;

    b1 = 2.08326996677116e-5*fs;

    a0 = 2.0833116321705e-5*fs + 1.04165581608525e-5;

    a1 = -2.0833116321705e-5*fs + 1.04165581608525e-5;
};

    wet = vslider("Direct[name:Direct]",  0.5, 0, 1, 0.01)  : si.smooth(0.993);

process =  p1 <:*(wet), (p2 : harmonic_exciter_clip(p3)):> p4 : fi.dcblockerat(1.0);
